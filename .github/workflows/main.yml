name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'  # This triggers on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual triggering from the GitHub UI

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux-amd64
            runsOn: ubuntu-latest
          - platform: linux-arm64
            runsOn: ubuntu-latest
          - platform: windows-amd64
            runsOn: windows-latest
    runs-on: ${{ matrix.runsOn }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      # Only on Linux: Download and install GraalVM CE
      - name: Download and Install GraalVM CE
        if: runner.os == 'Linux'
        run: |
          export GRAALVM_VERSION=22.3.1
          export JAVA_VERSION=17
          export GRAALVM_TAR=graalvm-ce-java${JAVA_VERSION}-${GRAALVM_VERSION}-linux-amd64.tar.gz
          export DOWNLOAD_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${JAVA_VERSION}-${GRAALVM_VERSION}/${GRAALVM_TAR}
          
          echo "Downloading GraalVM from ${DOWNLOAD_URL}"
          curl -L -o ${GRAALVM_TAR} ${DOWNLOAD_URL}
          tar -xzf ${GRAALVM_TAR}
          sudo mv graalvm-ce-java${JAVA_VERSION}-${GRAALVM_VERSION} /usr/lib/jvm/graalvm-ce-java${JAVA_VERSION}
          
          # Add GraalVM's bin directory to the PATH for subsequent steps
          echo "/usr/lib/jvm/graalvm-ce-java${JAVA_VERSION}/bin" >> $GITHUB_PATH
        shell: bash


      # Install native-image using gu
      - name: Install GraalVM Native Image
        if: runner.os == 'Linux'
        run: |
          gu install native-image || echo "native-image already installed"
        shell: bash
          
      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Build Fat JAR
        run: ./gradlew clean shadowJar

      - name: Build Native Executable
        run: |
          if [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            echo "Building Linux amd64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-linux-amd64
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            echo "Building Linux arm64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-linux-arm64
          elif [ "${{ matrix.platform }}" == "windows-amd64" ]; then
            echo "Building Windows amd64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-windows-amd64.exe
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mytool-${{ matrix.platform }}
          path: |
            mytool-linux-amd64*
            mytool-linux-arm64*
            mytool-windows-amd64*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts
          asset_name: mytool-binaries.zip
          asset_content_type: application/zip
