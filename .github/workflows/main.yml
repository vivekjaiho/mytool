name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

jobs:
  build:
    strategy:
      matrix:
        # Matrix includes three platforms.
        # For linux-arm64, you must have a self-hosted runner with the label "linux-arm64"
        platform: [ linux-amd64, linux-arm64, windows-amd64 ]
    # Specify runner based on the target platform.
    runs-on: ${{ 
      matrix.platform == 'windows-amd64' 
        ? 'windows-latest' 
        : matrix.platform == 'linux-amd64' 
          ? 'ubuntu-latest' 
          : 'self-hosted' 
    }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # For Linux runners, install GraalVM native-image if not already installed.
      - name: Install GraalVM Native Image
        if: runner.os == 'Linux'
        run: |
          # This assumes that gu is already in PATH via a GraalVM installation.
          gu install native-image || echo "native-image already installed"
        shell: bash

      - name: Build Fat JAR
        run: ./gradlew clean shadowJar

      - name: Build Native Executable
        id: build_native
        run: |
          if [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            echo "Building Linux amd64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-linux-amd64
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            echo "Building Linux arm64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-linux-arm64
          elif [ "${{ matrix.platform }}" == "windows-amd64" ]; then
            echo "Building Windows amd64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-windows-amd64.exe
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: mytool-${{ matrix.platform }}
          path: |
            mytool-linux-amd64*
            mytool-linux-arm64*
            mytool-windows-amd64*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts
          asset_name: mytool-binaries.zip
          asset_content_type: application/zip
