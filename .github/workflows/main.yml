name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*.*.*' # This triggers on version tags (e.g., v1.0.0)
  workflow_dispatch: # Allow manual triggering from the GitHub UI

# Add this permissions block at the workflow level
permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux-amd64
            runsOn: ubuntu-latest
          - platform: linux-arm64
            runsOn: ubuntu-latest
          - platform: windows-amd64
            runsOn: windows-latest
    
    runs-on: ${{ matrix.runsOn }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set Up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install GraalVM Native Image
        if: runner.os == 'Linux'
        run: |
          gu install native-image || echo "native-image already installed"
        shell: bash
      
      - name: Make gradlew executable
        if: runner.os != 'Windows'
        run: chmod +x gradlew
        shell: bash
      
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      
      - name: Build Fat JAR (Linux)
        if: runner.os != 'Windows'
        run: ./gradlew clean shadowJar
        shell: bash
        
      - name: Build Fat JAR (Windows)
        if: runner.os == 'Windows'
        run: ./gradlew clean shadowJar
        shell: pwsh
      
      - name: Build Native Executable for Linux
        if: matrix.platform == 'linux-amd64' || matrix.platform == 'linux-arm64'
        run: |
          if [ "${{ matrix.platform }}" == "linux-amd64" ]; then
            echo "Building Linux amd64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-linux-amd64
          elif [ "${{ matrix.platform }}" == "linux-arm64" ]; then
            echo "Building Linux arm64 binary"
            native-image --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-linux-arm64
          fi
        shell: bash
      
      - name: Build Native Executable for Windows
        if: matrix.platform == 'windows-amd64'
        run: |
          Write-Host "Building Windows amd64 binary"
          & "$env:GRAALVM_HOME\bin\native-image.cmd" --no-fallback -jar build/libs/mytool-1.0.0-all.jar mytool-windows-amd64.exe
        shell: pwsh
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mytool-${{ matrix.platform }}
          path: |
            mytool-${{ matrix.platform }}*
            mytool-${{ matrix.platform }}.exe*

  release:
    needs: build
    runs-on: ubuntu-latest
    # Add permissions at the job level too for extra certainty
    permissions:
      contents: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List Downloaded Artifacts
        run: find artifacts -type f | sort
        shell: bash
      
      - name: Zip Artifacts
        run: |
          mkdir -p release-assets
          zip -r release-assets/mytool-binaries.zip artifacts/
        shell: bash
      
      - name: Fix path for individual files
        run: |
          mkdir -p individual-files
          if [ -d "artifacts/mytool-linux-amd64" ]; then
            cp artifacts/mytool-linux-amd64/* individual-files/ 2>/dev/null || true
          fi
          if [ -d "artifacts/mytool-linux-arm64" ]; then
            cp artifacts/mytool-linux-arm64/* individual-files/ 2>/dev/null || true
          fi
          if [ -d "artifacts/mytool-windows-amd64" ]; then
            cp artifacts/mytool-windows-amd64/* individual-files/ 2>/dev/null || true
          fi
          find individual-files -type f | sort
        shell: bash
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/mytool-binaries.zip
            individual-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
